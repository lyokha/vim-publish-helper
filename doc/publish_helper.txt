*publish_helper.txt*   For Vim version 7.3 and above   Last change: 2014 Feb 11

                       ------------------------------
                        Publish Helper (HTML and TeX)
                       ------------------------------

                                version 0.8

Author: Alexey Radkov

==============================================================================
                                 *publish_helper* *publish_helper-contents*
1. Contents~

    1. Contents ..............................: |publish_helper-contents|
    2. About .................................: |publish_helper-about|
    3. Basic commands ........................: |publish_helper-basic-commands|
        3.1 MakeHtmlCodeHighlight ............: |publish_helper-cmd-html|
        3.2 MakeHtmlTexHighlight .............: |publish_helper-cmd-tex|
    4. vimhl.hs and pandoc ...................: |publish_helper-pandoc|
        4.1 Basic usage ......................: |publish_helper-pandoc-basic|
        4.2 Using with dedicated .vimrc file .: |publish_helper-pandoc-vimrc|
        4.3 Customizing vim settings .........: |publish_helper-pandoc-cust-vim|
        4.4 Options to choose color scheme ...: |publish_helper-pandoc-colors|
        4.5 Remarks ..........................: |publish_helper-pandoc-notes|
    5. Miscellaneous commands ................: |publish_helper-misc-commands|
        5.1 GetFgColorUnderCursor ............: |publish_helper-cmd-fgcolor|
        5.2 GetBgColorUnderCursor ............: |publish_helper-cmd-bgcolor|
    6. Configuration .........................: |publish_helper-configure|
        6.1 g:PhColorscheme ..................: |publish_helper-cfg-var-colors|
        6.2 g:PhHtmlEngine ...................: |publish_helper-cfg-var-htmleng|
        6.3 g:PhHtmlPreAttrs .................: |publish_helper-cfg-var-htmlpre|
        6.4 g:PhCtrlTrans ....................: |publish_helper-cfg-var-ctrltr|
        6.5 g:PhTrimBlocks ...................: |publish_helper-cfg-var-trimblk|
    7. Thanks to .............................: |publish_helper-thanks|
    A. Change History ........................: |publish_helper-changes|

==============================================================================
                                           *publish_helper-about*
2. About~

Vim plugin publish_helper provides two basic commands MakeHtmlCodeHighlight
and MakeTexCodeHighlight to produce HTML or TeX code respectively from the
contents of the current buffer or a part of the current buffer (in Visual
mode). The generated code opens up in a new window and contains color tags
that cite colors from the original buffer according to the current vim color
scheme or a color scheme declared by variable g:PhColorscheme.

The distribution of the plugin is shipped with a haskell program vimhl.hs that
may act as a filter for a great format conversion tool pandoc enabling it to
make use of vim's internal syntax highlighting engine when converting formats
to HTML or TeX.

==============================================================================
                                           *publish_helper-basic-commands*
3. Basic commands~

------------------------------------------------------------------------------
                                           *publish_helper-cmd-html*
3.1 MakeHtmlCodeHighlight~

Produces HTML code from the contents of the current buffer or a selected part
of it. Uses plugin TOhtml internally with temporarily set variable
g:html_use_css = 0 thus embedding color tags inside the generated HTML code.
Wraps the generated HTML code inside <pre> ... </pre> tags. Copy it in a
clipboard and then insert in any HTML document: an article in your blog,
HTML book etc. The code highlights will look the same as in your vim session!

The command may accept an optional argument that defines if the generated
code will be numbered in the resulting document and what number the first line
will be. If this argument is missing then line numbers will not be generated.
Otherwise if it is a positive integer then the number of the first line of the
generated code will be equal to this value, if it is a negative integer then
the number of the first line will be equal to the number of the first line in
the original buffer.

Starting from version 0.6 MakeHtmlCodeHighlight uses same highlighting engine
as MakeTexCodeHighlight by default. To switch back to TOhtml engine set
variable g:PhHtmlEngine = 'tohtml'.

Output of TOhtml may differ from that of default highlighting engine: it
renders buffers in a very verbose way and may content folds, bold text etc.
whereas default engine normally ignores view details of the buffer.

------------------------------------------------------------------------------
                                           *publish_helper-cmd-tex*
3.2 MakeTexCodeHighlight~

Basically this command is a twin of the previous one, only it produces a TeX
code that is compatible with pandoc generated TeX documents. As such the
generated TeX code contains color tags corresponding to the vim color scheme
used and is wrapped inside tags
>
    \begin{Shaded}
    \begin{Highlighting}[]
<
and
>
    \end{Highlighting}
    \end{Shaded}
<

==============================================================================
                                           *publish_helper-pandoc*
4. vimhl.hs and pandoc~

This is probably the most interesting feature of the plugin. Both commands
MakeHtmlCodeHighlight and MakeTexCodeHighlight can be used as drivers to the
vim syntax highlighting engine from pandoc. This is achieved via pandoc's
filter feature available from pandoc version 1.12.

------------------------------------------------------------------------------
                                           *publish_helper-pandoc-basic*
4.1 Basic usage~

This distribution is shipped with a haskell program vimhl.hs which is supposed
to be such a filter. Normally one may want to compile it
>
    ghc --make vimhl
>
and move produced binary executable file vimhl in some directory listed in the
environment variable $PATH. Alterantively one may make original file vimhl.hs
executable
>
    chmod +x vimhl.hs
<
and move it somewhere in the $PATH as well. The first method is preferable.
After that pandoc gets capable to produce HTML or TeX code with authentic vim
syntax highlights! Let's make an example. Say you want to convert an HTML
article from your cool IT blog with multiple examples of C++ codes into PDF
format via pandoc HTML-to-TeX conversion engine. Normally you open the
article, find tags <pre> starting the codes and add there the attribute
class="cpp"
>
    <pre class="cpp">
>
After that you run pandoc to create TeX code from the original HTML article
>
    pandoc -f html -t latex -o article.tex article.html
>
As far as pandoc finds attribute class="cpp" inside tags <pre> ... </pre> it
generates its own code highlights based on the editor Kate's engine. Now you
can add another attribute hl="vim" inside tags <pre>
>
    <pre class="cpp" hl="vim">
>
and run pandoc with the filter vimhl (or vimhl.hs if you did not compile
vimhl)
>
    pandoc -f html -t latex -F vimhl -o article.tex article.html
>
If you then generate the PDF document from the article.tex the codes will be
highlighted exactly as they were highlighted inside vim! As soon as command
MakeTexCodeHighlight accepts the optional argument which defines that
generated code must be numbered you can put usual pandoc options inside tags
<pre> to turn code numbering on
>
    <pre class="cpp numberLines" hl="vim" startFrom="100">
>
------------------------------------------------------------------------------
                                           *publish_helper-pandoc-vimrc*
4.2 Using with dedicated .vimrc file~

Running vim with normal $HOME/.vimrc and all the scripts in the directory
$HOME/.vim/ consumes many resources and unnecessarily slows pandoc down. To
fight this you can create a new file .vimrc.pandoc in your home directory with
very minimal settings. When vimhl.hs finds this file it runs vim with options
--noplugin -u $HOME/.vimrc.pandoc. As soon as plugins are turned off
.vimrc.pandoc must source at least plugins publish_helper and TOhtml (for
producing HTML documents, but since version 0.6 of this plugin this is
optional). Here is an example of good .vimrc.pandoc contents:
>
    set nocompatible

    filetype off    " filetype is set by vimhl

    let g:lucius_style = 'light'
    let g:lucius_contrast = 'high'
    let g:lucius_contrast_bg = 'high'

    colorscheme lucius
    syntax on

    let g:PhCtrlTrans = 0

    runtime plugin/publish_helper.vim
<
You may need to source other plugins, for example TagHighlight which makes
possible to highlight tags generated by ctags.

------------------------------------------------------------------------------
                                           *publish_helper-pandoc-cust-vim*
4.3 Customizing vim settings~

Starting from version 0.7 vimhl accepts a new attribute vars to define global
vim variables. The example of a custom .vimrc.pandoc script from the previous
section contains definition of a global variable g:PhCtrlTrans. Now you can
remove this definition from the script and set variable g:PhCtrlTrans
dynamically from the filter only for those code blocks that require it. To
accomplish this put the new attribute vars="PhCtrlTrans" in such code blocks.

Global variables are also good for making selection between arbitrary
conditions. Imagine that script .vimrc.pandoc has lines
>
    if exists('g:load_TagHl')
        colorscheme bandit
        runtime plugin/TagHighlight.vim
        let g:TagHighlightSettings['LanguageDetectionMethods'] = ['FileType']
    endif

    if exists('g:PhHtmlEngine') && g:PhHtmlEngine == 'tohtml'
        runtime plugin/tohtml.vim
        let g:html_no_progress = 1
        let g:html_ignore_folding = 1
    endif
>
The first condition says that if a global variable g:load_TagHl exists then
vimhl must use color scheme 'bandit' and load plugin 'TagHighlight' that would
normally add extra highlighting groups to make code highlights look rich and
more beautiful. The second condition says that if a global variable
g:PhHtmlEngine exists and is equal to 'tohtml' then vimhl must load plugin
TOhtml.

The new attribute vars allows loading vim global variables from the original
document. To turn conditions in the example above on it must be defined as
vars="load_TagHl,PhHtmlEngine=tohtml". This example shows that variables must
be delimited by commas, their values are defined after equal sign, if the
equal sign is missing then the value is supposed to be equal to 1, quote signs
around the value and the prefix g: before the variable name are missing and
will be substituted transparently inside vimhl.

------------------------------------------------------------------------------
                                           *publish_helper-pandoc-colors*
4.4 Options to choose color scheme~

Here is the algorithm of choosing color scheme in priority order:

- If tag <pre> contains attribute colorscheme="<value>" then <value> is
  chosen, else

- If file $HOME/.vimrc.pandoc contains line colorscheme <value> then <value>
  is chosen, else

- If file $HOME/.vimrc contains line let g:PhColorscheme = "<value>" then
  <value> is chosen, else

- If file $HOME/.vimrc contains line colorscheme <value> then <value>
  is chosen, else

- System vim color scheme is chosen

The second case, i.e. when colorscheme is defined in file $HOME/.vimrc.pandoc,
is preferable as vim will consume less resources and work fastest.

------------------------------------------------------------------------------
                                           *publish_helper-pandoc-notes*
4.5 Remarks~

- Be aware that when running vimhl.hs may create temporary files _vimhl_buffer
  and _vimhl_result that will be deleted after finishing the job.

- Tag class may contain a list of values. To make vimhl.hs work properly the
  file type must be the first value in the list.

- Normally pandoc adds definitions of Shaded and Highlighting environments in
  TeX output when it finds CodeBlock branches in generated AST. Publish helper
  will replace CodeBlock branches with RawBlock branches and pandoc may skip
  inserting those definitions. In this case you can add it manually in the
  preamble of the TeX document:
>
    \usepackage{color}
    \usepackage{xcolor}
    \usepackage{fancyvrb}
    \newcommand{\VerbBar}{|}
    \newcommand{\VERB}{\Verb[commandchars=\\\{\}]}
    \DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}}
    \usepackage{framed}
    \newenvironment{Shaded}{
      \definecolor{shadecolor}{rgb}{1.0, 1.0, 0.9}
      \setlength\parskip{0cm}
      \setlength\partopsep{-\topsep}
      \addtolength\partopsep{0.2cm}
      \begin{shaded}
        \scriptsize
    }{\end{shaded}}
<
  All settings inside environment Shaded are optional. For example value of
  shadecolor defines background color of the code block: if you do not want
  that code blocks in your documents have specific background color then just
  do not define it in Shaded environment.

- If you have installed vim plugin for pandoc
  (http://www.vim.org/scripts/script.php?script_id=3730) then you'll probably
  notice bad syntax highlighting when editing .vimrc.pandoc from vim. To make
  it normal change content of .vim/ftdetect/pandoc.vim to
>
    au BufNewFile,BufRead *.markdown,*.md,*.mkd,*.pd,*.pdk,*.pandoc,*.text
             \ if expand('<afile>:t') != '.vimrc.pandoc' | set filetype=pandoc
<

==============================================================================
                                           *publish_helper-misc-commands*
5. Miscellaneous commands~

There are two additional commands GetFgColorUnderCursor and
GetBgColorUnderCursor. They have nothing to do with the code highlighting task
and were added for debugging purposes only. You can map them like
>
    nmap <silent> ,vc :GetFgColorUnderCursor<CR>
    nmap <silent> ,vb :GetBgColorUnderCursor<CR>
<
and find foreground or background colors under cursor with a simple keystroke.

------------------------------------------------------------------------------
                                           *publish_helper-cmd-fgcolor*
5.1 GetFgColorUnderCursor~

Get foreground color under cursor.

------------------------------------------------------------------------------
                                           *publish_helper-cmd-bgcolor*
5.2 GetBgColorUnderCursor~

Get background color under cursor.

==============================================================================
                                           *publish_helper-configure*
6. Configuration~

------------------------------------------------------------------------------
                                           *publish_helper-cfg-var-colors*
6.1 g:PhColorscheme~

>
    let g:PhColorscheme = 'lucius'
<
This variable specifies dedicated color scheme for syntax highlights by
MakeHtmlCodeHighlight and MakeTexCodeHighlight. If not set then the current
color scheme will be used. Do not set it in .vimrc.pandoc as normal setting of
color scheme is preferred there.

------------------------------------------------------------------------------
                                           *publish_helper-cfg-var-htmleng*
6.2 g:PhHtmlEngine~

>
    let g:PhHtmlEngine = 'tohtml'
<
Available since version 0.6. If value is "tohtml" then TOhtml engine will be
used to render HTML highlights, otherwise the internal engine will be used.
Not set by default.

------------------------------------------------------------------------------
                                           *publish_helper-cfg-var-htmlpre*
6.3 g:PhHtmlPreAttrs~

This variable sets attributes that will be inserted inside tags <pre> in the
generated HTML documents. Examples:
>
    let g:PhHtmlPreAttrs = 'style="white-space: pre-wrap;"'
<
>
    let g:PhHtmlPreAttrs = 'style="overflow-x: auto;"'
<

------------------------------------------------------------------------------
                                           *publish_helper-cfg-var-ctrltr*
6.4 g:PhCtrlTrans~

>
    let g:PhCtrlTrans = 1
<
Some programming languages allow using verbatim control characters. For
example you may define an interactive scenario in viml with command |normal|
which may require them. This variable specifies that MakeTexCodeHighlight will
accurately translate verbatim control characters in their usual vim ascii
representation. Setting this variable for using from vimhl.hs does not always
work as expected because some values (like ^M) may have been already lost on
the pandoc's AST level. This variable is not set by default.

------------------------------------------------------------------------------
                                           *publish_helper-cfg-var-trimblk*
6.5 g:PhTrimBlocks~

>
    let g:PhTrimBlocks = 0
<
This variable defines if blank lines around code blocks will be removed. Set
to 1 by default.

==============================================================================
                                           *publish_helper-thanks*
7. Thanks to~

Christian Brabandt for plugin Colorizer and Xterm2rgb translation functions.

==============================================================================
                                           *publish_helper-changes*
A. Change History~

0.1
    - initial release

0.2
    - dropped perl dependency in vimhl.hs
    - vimhl.hs is no longer executable script (make it executable or compile)
    - docs added

0.3
    - vimhl.hs: added possibility to load a dedicated file $HOME/.vimrc.pandoc
      instead normal $HOME/.vimrc when running pandoc: this will extremely
      speed up pandoc; see docs for details
    - vimhl.hs: added another option to choose color scheme when running
      pandoc: attribute colorscheme; however using file $HOME/.vimrc.pandoc is
      more preferable

0.4
    - fixed white-instead-black foreground issue
    - added example of how to use Shaded and Highlighting environments in docs
    - other small fixes

0.5
    - added new variable g:PhCtrlTrans that deals with correct representation
      of control characters in MakeTexCodeHighlight

0.6
    - all elements that do not have syntax names are highlighted by Normal
      highlighting group
    - HTML may now be rendered using internal plugin's highlighting engine,
      this is controlled by a new variable g:PhHtmlEngine; with the new engine
      line numbering of code blocks gets available
    - added new variable g:PhTrimBlocks to control how blank lines around the
      code will be managed

0.7
    - customizing attributes of HTML tag <pre> using variable g:PhHtmlPreAttrs
    - select between conditions in .vimrc or .vimrc.pandoc using variables
      defined in a new attribute vars (see docs)

0.8
    - both HTML rendering engines do not use tag <tt> any longer
    - improved TOhtml rendering engine: full support of line numbering,
      regular spaces instead HTML non-breaking spaces
    - docs updated

vim:tw=78:sts=8:ts=8:sw=8:noet:ft=help:
